/**
@mainpage Overview
@anchor jobs
@brief AWS IoT Jobs client library, part of the AWS IoT Device SDK for Embedded C

<p>
AWS IoT jobs can be used to define a set of remote operations that are sent to and executed on one or more devices connected to AWS IoT.
For documentation of the service, please see the [AWS Iot Developer Guide](https://docs.aws.amazon.com/iot/latest/developerguide/iot-jobs.html).
Interactions with the jobs service use MQTT, a lightweight publish-subscribe protocol.
This library provides a convenience API to compose and recognize the MQTT topic strings used by the jobs service.
The library is written in C and designed to be compliant with ISO C90 and MISRA C:2012.
It has proofs showing safe memory use and no heap allocation, making it suitable for IoT microcontrollers, but also fully portable to other platforms.
</p>

@section jobs_memory_requirements Memory Requirements
@brief Memory requirements of the jobs library.

<table>
    <tr>
        <td colspan="4"><center><b>Code Size of jobs library files (sizes generated with [GCC for ARM Cortex-M toolchain 20191025](https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads/9-2019-q4-major))</b></center></td>
    </tr>
    <tr>
        <td><b>File</b></td>
        <td><b>No Optimization (asserts enabled)</b></td>
        <td><b>With -O1 Optimization (asserts disabled)</b></td>
        <td><b>With -Os Optimization (asserts disabled)</b></td>
    </tr>
    <tr>
        <td>jobs.c</td>
        <td>4.6K</td>
        <td>2.6K</td>
        <td>2.3K</td>
    </tr>
</table>
 */

/**
@page jobs_features Features
Jobs Library Features

<h3>Memory Usage</h3>
<p>
All functions in the jobs library operate only on the buffers provided, and use only
local variables on the stack.
</p>

<h3>Compliance & Coverage</h3>
<p>
The jobs library is designed to be compliant with ISO C90 and MISRA C:2012.
All functions are written to have minimal complexity.
Unit tests and [CBMC](https://www.cprover.org/cbmc/) proofs are written to cover every path of execution and achieve 100% branch coverage.
</p>
*/
